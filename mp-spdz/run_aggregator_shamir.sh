#!/bin/bash

# Script to run Shamir MPC for 'anonymous_inclusion_aggregator'
# Assumes input files (Player-Data/Input-P*-0) have been generated by the
# sequence: generate_mempool.py -> generate_inputs.py -> generate_local_tree.py

if [ -z "$1" ]; then
  echo "Usage: $0 <num_parties_for_this_run>"
  echo "Example: $0 4"
  exit 1
fi

N_RUNTIME_PARTIES=$1
BASE_PROGRAM_NAME="anonymous_inclusion_aggregator"
COMPILED_PROGRAM_NAME="${BASE_PROGRAM_NAME}-${N_RUNTIME_PARTIES}"
BASE_PORT=14000

echo "-----------------------------------------------------"
echo "[RunScript] Preparing to run MPC for ${N_RUNTIME_PARTIES} parties."
echo "[RunScript] Target compiled program: ${COMPILED_PROGRAM_NAME}"
echo "-----------------------------------------------------"
echo "[RunScript] Assuming input files (Player-Data/Input-P*-0) are already generated."
echo "-----------------------------------------------------"

echo "[RunScript] Starting ${N_RUNTIME_PARTIES}-party Shamir MPC for program ${COMPILED_PROGRAM_NAME}"

PARTY_EXEC=""
if [ -f "./shamir-party.x" ]; then
    PARTY_EXEC="./shamir-party.x"
elif [ -f "./Parties/shamir-party.x" ]; then
    PARTY_EXEC="./Parties/shamir-party.x"
elif [ -f "./shamir-party.sh" ]; then
    PARTY_EXEC="./shamir-party.sh"
else
    echo "[RunScript] ERROR: shamir-party.x (or .sh wrapper) not found in common locations."
    exit 1
fi
echo "[RunScript] Using party executable: ${PARTY_EXEC}"

COMMON_OPTS="-N ${N_RUNTIME_PARTIES} -pn ${BASE_PORT}"
LOG_DIR="Logs"
P0_LOG_FILE="${LOG_DIR}/P0_${COMPILED_PROGRAM_NAME}.log"

mkdir -p ${LOG_DIR}
rm -f ${LOG_DIR}/P*_${COMPILED_PROGRAM_NAME}.log

echo "[RunScript] Launching Party 0..."
${PARTY_EXEC} -p 0 ${COMMON_OPTS} ${COMPILED_PROGRAM_NAME} > ${P0_LOG_FILE} 2>&1 &
PIDS[0]=$!

for i in $(seq 1 $((N_RUNTIME_PARTIES - 1)))
do
    echo "[RunScript] Launching Party $i..."
    ${PARTY_EXEC} -p $i ${COMMON_OPTS} ${COMPILED_PROGRAM_NAME} > ${LOG_DIR}/P${i}_${COMPILED_PROGRAM_NAME}.log 2>&1 &
    PIDS[$i]=$!
done

echo "[RunScript] All parties launched. Waiting for completion..."
echo "[RunScript] Party PIDs:"
for i in $(seq 0 $((N_RUNTIME_PARTIES - 1))); do
    echo "  P${i}=${PIDS[$i]}"
done

ALL_SUCCESS=1
for i in $(seq 0 $((N_RUNTIME_PARTIES - 1)))
do
    echo "[RunScript] Waiting for Party $i (PID ${PIDS[$i]}) to complete..."
    wait ${PIDS[$i]}
    RET_CODE=$?
    echo "[RunScript] Party $i finished with status ${RET_CODE}. Log: ${LOG_DIR}/P${i}_${COMPILED_PROGRAM_NAME}.log"
    if [ ${RET_CODE} -ne 0 ]; then
        ALL_SUCCESS=0
        echo "[RunScript] ***** ERROR DETECTED FOR PARTY $i *****"
    fi
done

echo "-----------------------------------------------------"
if [ ${ALL_SUCCESS} -eq 1 ]; then
    echo "[RunScript] All parties finished successfully."
    echo "[RunScript] Main output (from print_ln) is in ${P0_LOG_FILE}"
    echo "[RunScript] --- Content of ${P0_LOG_FILE} ---"
    cat "${P0_LOG_FILE}"
    echo "[RunScript] --- End of P0 Log ---"
    echo ""
    echo "[RunScript] --- Parsed Final Anonymous Inclusion List ---"
    if [ -f "${P0_LOG_FILE}" ]; then
        # Grep for candidate lines with Status: 1, then extract the TX_ID
        # Expected line format: FINAL_INCLUSION_CANDIDATE: TX_ID=011 MeetsThresholdStatus=1
        INCLUDED_TX_IDS=$(grep "FINAL_INCLUSION_CANDIDATE:" "${P0_LOG_FILE}" | grep "MeetsThresholdStatus=1" | sed -e 's/.*TX_ID=//' -e 's/ MeetsThresholdStatus=1//')
        
        if [ -n "${INCLUDED_TX_IDS}" ]; then
            echo "${INCLUDED_TX_IDS}" | while IFS= read -r tx_id; do
                echo "Included TX ID: ${tx_id}"
            done
        else
            echo "No transaction IDs met the threshold for inclusion."
        fi
    else
        echo "Log file ${P0_LOG_FILE} not found. Cannot parse inclusion list."
    fi
else
    echo "[RunScript] One or more parties reported an error. Please check logs in the '${LOG_DIR}' directory."
fi
echo "-----------------------------------------------------"